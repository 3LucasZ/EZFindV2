// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//----META----

generator client {
  provider = "prisma-client-js"
  // **VERY important to have the bin targets! host native, arm64, amd64**
  // ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"] 
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"] 
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

//----USER AUTH----

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //custom
  isAdmin       Boolean @default(false)
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
//----DB----
// model Group {
//   id Int @id @default(autoincrement())
//   name String @unique @db.VarChar(255)
//   description String @db.VarChar(255)
//   iamge Bytes @default("")
// }

model Item {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  description String @db.VarChar(255)
  image Bytes @default("")
  relations Relation[]
}

model Storage {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  description String @db.VarChar(255)
  image Bytes @default("")
  relations Relation[]
}

model Relation {
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int 
  storage Storage @relation (fields: [storageId], references: [id], onDelete: Cascade)
  storageId Int
  count Int
  @@id([itemId, storageId])
}